##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;
	ssl_certificate /root/cert_tencent/htstack.keqikeqikeqi.tech_bundle.pem; #  滻Ϊ   ֤  ·  
    ssl_certificate_key /root/cert_tencent/htstack.keqikeqikeqi.tech.key; #  滻Ϊ   ˽Կ·  
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;



	location /chat {
# Set the proxy pass to https://chat.openai.com/
		proxy_pass  https://chat.openai.com/;

		proxy_redirect https://chat.openai.com/ /;
# Set the Host header to chat.openai.com
		
# Set the Connection header to an empty string
		proxy_cookie_domain chat.openai.com chat.openai.com;

		proxy_set_header Host chat.openai.com;
		proxy_set_header Connection '';


		# **proxy_pass https://api.openai.com/;**：这是反向代理的核心指令，它告诉Nginx将匹配到的请求转发到`https://api.openai.com/`。这意味着所有发送到Nginx服务器的请求都会被转发到这个URL。
		# 这个指令设置请求头中的‘Host‘字段为客户端请求的原始主机名。‘host`是一个Nginx变量，表示客户端请求的主机名。
        proxy_set_header X-Forwarded-For $remote_addr; # 不加这个绝对openai会封你的ip
        proxy_set_header X-Forwarded-Proto $scheme; # 不加这个绝对openai会封你的ip
        # SSL 代理配置（可选）
        proxy_ssl_server_name on; #这个指令（可选）启用SSL代理配置，允许Nginx在代理请求时使用SSL。这对于确保客户端和Nginx之间的通信安全非常重要。
    }

	location / {
# Set the proxy pass to https://api.openai.com/
		proxy_pass  https://api.openai.com/;
# Set the Host header to api.openai.com
		proxy_set_header Host api.openai.com;
# Set the Connection header to an empty string
		proxy_set_header Connection '';
# Set the HTTP version to 1.1
		proxy_http_version 1.1;
# Disable chunked transfer encoding
		chunked_transfer_encoding off;
# Disable proxy buffering
		proxy_buffering off;
# Disable proxy caching
		proxy_cache off;

		# **proxy_pass https://api.openai.com/;**：这是反向代理的核心指令，它告诉Nginx将匹配到的请求转发到`https://api.openai.com/`。这意味着所有发送到Nginx服务器的请求都会被转发到这个URL。
		# 这个指令设置请求头中的‘Host‘字段为客户端请求的原始主机名。‘host`是一个Nginx变量，表示客户端请求的主机名。
        proxy_set_header X-Forwarded-For $remote_addr; # 不加这个绝对openai会封你的ip
        proxy_set_header X-Forwarded-Proto $scheme; # 不加这个绝对openai会封你的ip
        # SSL 代理配置（可选）
        proxy_ssl_server_name on; #这个指令（可选）启用SSL代理配置，允许Nginx在代理请求时使用SSL。这对于确保客户端和Nginx之间的通信安全非常重要。
    }

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
